------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Создание таблиц
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE EMPLOYEE (
  EMP_ID SERIAL, 
  EMP_NAME VARCHAR(20) NOT NULL,
  EMP_PHONE VARCHAR(10) NULL,
  BIRTH DATE NULL,
  BEGIN_DATE DATE NOT NULL,
  WORK_EXP SMALLINT NULL,
  CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMP_ID)
);

CREATE TABLE CLIENT (
  CL_ID SERIAL,
  CL_NAME VARCHAR(20) NOT NULL,
  CL_PHONE VARCHAR(10) NULL,
  CONSTRAINT PK_CLIENT PRIMARY KEY (CL_ID)
);

CREATE TABLE SERVICE (
  SERV_ID SERIAL,
  SERV_NAME VARCHAR(50) NOT NULL,
  SERV_TYPE VARCHAR(100) NOT NULL,
  MEASURE VARCHAR(30) NULL,
  SERV_COST NUMERIC NOT NULL,
  CONSTRAINT PK_SERVICE PRIMARY KEY (SERV_ID)
);

CREATE TABLE DEPARTURE (
  DEP_ID SERIAL,
  FAC_ID INTEGER NOT NULL,
  DEP_DATE DATE NOT NULL,
  TIME_COME TIME NOT NULL, -- NULL -> ПРОВЕРИТЬ ФУНКЦИИ
  TIME_INCOME TIME NULL,
  DEP_TIME TIME NULL,
  EMP_CNT INTEGER NULL,-- > 1
  DEP_SUM NUMERIC NULL,
  CONSTRAINT PK_DEPARTURE PRIMARY KEY (DEP_ID)
);

CREATE TABLE FACILITY (
  FAC_ID SERIAL,
  TOWN VARCHAR(50) NOT NULL,
  PLACE VARCHAR(100) NOT NULL,
  DISTANCE INTEGER NULL,
  CL_ID INTEGER NOT NULL,
  UNIQUE (TOWN, PLACE),
  CONSTRAINT PK_FACILITY PRIMARY KEY (FAC_ID)
);

CREATE TABLE EMPLOYEE_ON_DEPARTURE (
  EMP_DEP_ID SERIAL,
  DEP_ID INTEGER not NULL,
  EMP_ID INTEGER NOT NULL,
  CONSTRAINT PK_EMPLOYEE_ON_DEPARTURE PRIMARY KEY (EMP_DEP_ID)
);

CREATE TABLE EQUIPMENT (
  EQ_ID SERIAL,
  EQ_NAME VARCHAR(50) NOT NULL,
  DO_DATE VARCHAR(5) NOT NULL,
  EQ_LIFE SMALLINT NOT NULL,
  EQ_COST INTEGER NOT NULL,
  EQ_COUNT SMALLINT NOT NULL,
  CONSTRAINT PK_EQUIPMENT PRIMARY KEY (EQ_ID)
);

CREATE TABLE EQUIPMENT_ON_DEPARTURE (
  DEQ_ID SERIAL,
  DEP_ID INTEGER NOT NULL, -- NULL
  EMP_ID INTEGER NOT NULL,
  EQ_ID INTEGER NOT NULL,
  EQ_COUNT INTEGER NOT NULL, -- > 1
  RETURN_EQ VARCHAR(1) NOT NULL,
  CONSTRAINT PK_EQUIPMENT_ON_DEPARTURE PRIMARY KEY (DEQ_ID)
);

-- Создание внешних ключей
ALTER TABLE public.EQUIPMENT_ON_DEPARTURE 
  ADD CONSTRAINT FK_EQUIPMENT_ON_DEPARTURE_DEP_ID 
  FOREIGN KEY (DEP_ID) 
  REFERENCES DEPARTURE(DEP_ID) ON DELETE CASCADE;

ALTER TABLE public.EQUIPMENT_ON_DEPARTURE 
  ADD CONSTRAINT FK_EQUIPMENT_ON_DEPARTURE_EMP_ID
  FOREIGN KEY (EMP_ID) 
  REFERENCES EMPLOYEE(EMP_ID) ON DELETE CASCADE;

ALTER TABLE public.EQUIPMENT_ON_DEPARTURE 
  ADD CONSTRAINT FK_EQUIPMENT_ON_DEPARTURE_EQ_ID 
  FOREIGN KEY (EQ_ID) 
  REFERENCES EQUIPMENT(EQ_ID) ON DELETE CASCADE;

ALTER TABLE public.EMPLOYEE_ON_DEPARTURE
  ADD CONSTRAINT FK_EMPLOYEE_ON_DEPARTURE_DEP_ID
  FOREIGN KEY (DEP_ID)
  REFERENCES DEPARTURE(DEP_ID) ON UPDATE CASCADE;
  
ALTER TABLE public.EMPLOYEE_ON_DEPARTURE
  ADD CONSTRAINT FK_EMPLOYEE_ON_DEPARTURE_EMP_ID
  FOREIGN KEY (EMP_ID)
  REFERENCES EMPLOYEE(EMP_ID) ON UPDATE CASCADE;
  
ALTER TABLE public.FACILITY
  ADD CONSTRAINT FK_FACILITY_CL_ID
  FOREIGN KEY (CL_ID)
  REFERENCES CLIENT(CL_ID) ON UPDATE CASCADE;
  
ALTER TABLE public.DEPARTURE
  ADD CONSTRAINT FK_DEPARTURE_FAC_ID
  FOREIGN KEY (FAC_ID)
  REFERENCES FACILITY(FAC_ID) ON UPDATE CASCADE;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Заполнение таблиц SERVICE и EQUIPMEMTNT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO SERVICE (SERV_NAME, SERV_TYPE, MEASURE, SERV_COST) VALUES
('Садовник', 'выезд 1 -го специалиста для проведения работ до 1 часа', 'час', 2900),
('Садовник', 'выезд 2 -х специалистов для проведения работ до 1 часа', 'час', 4000),
('Садовник', 'выезд дополнительного специалиста в составе бригады до 1 часа', 'час', 1900),
('Садовник', 'каждый последующий час работы каждого специалиста', 'час', 950),
('Садовник', 'транспортные расходы за пределы города (расстояние между центрами городов)', 'км', 45);

INSERT INTO EQUIPMENT(EQ_NAME, DO_DATE, EQ_LIFE, EQ_COST, EQ_COUNT) VALUES 
('Газонокосилка бензиновая', '2014', 5, 7990, 12),
('Газонокосилка бензиновая', '2019', 5, 19500, 10),
('Газонокосилка бензиновая', '2020', 5, 12000, 20),
('Газонокосилка бензиновая', '2018', 5, 25000, 4),
('Газонокосилка бензиновая', '2022', 5, 13000, 20),
('Газонокосилка электро', '2018', 5, 5500, 36),
('Газонокосилка аккум', '2019', 5, 12000, 7),
('Газонокосилка электро', '2020', 5, 4000, 6),
('Газонокосилка электро', '2022', 5, 6500, 4),
('Газонокосилка электро', '2023', 5, 7500, 28),
('Газонокосилка электро', '2017', 5, 6000, 4),
('Газонокосилка электро', '2017', 3, 3000, 4),
('Газонокосилка электро', '2021', 5, 4000, 45),
('Триммер', '2010', 7, 12000, 6),
('Триммер', '2014', 7, 6000, 7),
('Триммер', '2017', 7, 6000, 4),
('Триммер аккум', '2020', 7, 5655, 14),
('Триммер бензо', '2021', 5, 5000, 6),
('Мотоблок', '2010', 12, 25000, 4),
('Мотоблок', '2013', 7, 22200, 10),
('Почвоизмельчитель', '2020', 15, 3490, 4),
('Бензоопрыскиватель', '2012', 8, 30000, 35),
('Бензопила', '2016', 7, 16000, 5),
('Бензопила', '2014', 7, 34000, 15),
('Бензопила', '2021', 5, 6691, 18),
('Элетропила на штанге', '2018', 10, 5000, 7),
('Сучкорез на палке', '2017', 5, 500, 6),
('Насадка на бензопилу', '2017', 5, 2000, 5),
('Секатор телескопический', '2021', 7, 12000, 6),
('Электрокронорез', '2022', 10, 5000, 14),
('Секатор телескопический', '2023', 7, 3000, 7),
('Секатор для штанги', '2023', 5, 2200, 18),
('Секатор', '2023', 7, 3000, 10),
('Высоторез', '2023', 7, 12000, 49),
('Пила для высотореза', '2023', 7, 4000, 6),
('Ножёвка телескопическая', '2023', 7, 3500, 5),
('Пылесос', '2014', 7, 14000, 6),
('Пылесос', '2017', 7, 4500, 63),
('Пылесос', '2019', 7, 3000, 6),
('Штанговые бензоножницы', '2019', 15, 40000, 7),
('Электроножницы', '2022', 7, 12000, 5),
('Электроножницы', '2016', 7, 5000, 30),
('Бензиновые ножницы', '2012', 7, 11000, 20),
('Мотоножницы', '2022', 9, 26490, 6),
('Электрокусторез', '2022', 7, 12000, 21),
('Бензиновые ножницы', '2023', 7, 40000, 12),
('Электрокусторез', '2023', 7, 10000, 5),
('Бензиновые ножницы', '2024', 7, 28000, 5),
('Бензомотопомпа мини', '2011', 7, 6500, 4),
('Заборный шланг к минипомпе с фильтром', '2019', 7, 1600, 4),
('Заборный шланг к большой помпе', '2021', 7, 2000, 5),
('Мотопомпа мини', '2019', 7, 6000, 6),
('Рукав пожарный красный (латекс)', '2020', 10, 6000, 6),
('Бензомотопомпа мини', '2020', 7, 8500, 7),
('Бензопомпа', '2022', 7, 21500, 8),
('Аэратор', '2021', 7, 16000, 20),
('Ножницы для травы электрические', '2014', 3, 5000, 10),
('Ножницы для травы электрические', '2016', 3, 3000, 18),
('Ножницы для травы электрические', '2018', 3, 6500, 16),
('Ножницы для травы электрические аккум', '2018', 3, 3500, 12),
('Ножницы для травы ручные', '2022', 5, 1000, 15),
('Ножницы для травы ручные', '2023', 4, 1500, 15),
('Насадка на бур 200мм.', '2020', 9, 2500, 8),
('Бензобур', '2021', 9, 16000, 18),
('Удлинитель для бура 0,5м.', '2023', 15, 1000, 12),
('Удлинитель для бура 1м.', '2023', 15, 1000, 5),
('Бурдля мёрзлой земли 150мм.', '2023', 15, 3750, 10),
('Тачка с безкаменым колесом', '2018', 3, 3000, 5),
('Тачка', '2020', 12, 10000, 42),
('Колесо 1шт.', '2020', 12, 4000, 6),
('Секатор', '2022', 5, 1100, 222),
('Ножницы для цветов', '2023', 7, 1427, 10),
('Секатор', '2023', 5, 550, 24),
('Мотыжка ручная 6,5см. с 3мя зубьями', '2019', 10, 719, 32),
('Мотыжка ручная 6см. с 2мя зубьями', '2021', 10, 780, 10),
('Опрыскиватель 5л.', '2016', 7, 1000, 85),
('Опрыскиватель 5л.', '2020', 5, 800, 8),
('Опрыскиватель аккумуляторный 12л.', '2021', 5, 2300, 21),
('Опрыскиватель аккумуляторный 10л.', '2022', 5, 2500, 4),
('Опрыскиватель 3л.', '2022', 5, 300, 4),
('Опрыскиватель аккумуляторный 16л.', '2022', 5, 3000, 7),
('Опрыскиватель аккумуляторный  16л.', '2023', 7, 3470, 24),
('Опрыскиватель', '2023', 7, 3000, 42),
('Грабли веерные', '2021', 3, 1850, 112),
('Грабли планировочные', '2018', 7, 1800, 18),
('Грабли для отчистки газона', '2021', 7, 1868, 36),
('Лопата рельсовая', '2019', 3, 400, 6),
('Соперная лопата', '2016', 7, 500, 12),
('Лопата штыковая', '2020', 5, 900, 140),
('Лопата для снега', '2021', 7, 1500, 25),
('Лопата совковая', '2021', 3, 650, 30),
('Штык', '2022', 3, 711, 12),
('Лопата штыковая', '2022', 5, 1550, 60),
('Лопата штыковая', '2023', 7, 1850, 108),
('Лопата сопёрная', '2023', 7, 1050, 12),
('Лопата мини', '2023', 7, 1300, 7),
('Сучкорез', '2017', 7, 1650, 78),
('Сучкорез', '2022', 7, 3000, 32),
('Сучкорез', '2023', 7, 1775, 10),
('Извлекатель сорняков', '2016', 10, 2000, 4),
('Вилы для прокола газона', '2018', 7, 850, 6),
('Рохля 2000кг.', '2012', 15, 10000, 6),
('Станок для заточки', '2016', 10, 2000, 4),
('Огнетушитель 5л.', '2016', 5, 500, 4),
('Тиски 3,5кг.', '2017', 15, 1000, 6),
('Распылитель пожарный', '2010', 15, 2500, 6),
('Дозатор для внесения удобрений', '2015', 10, 2500, 5),
('Рохля 2500кг.', '2015', 15, 14000, 6),
('Тренога с 2-мя лебёдками 800кг.', '2015', 10, 3000, 4),
('Щиты 4шт. для пересадки', '2015', 15, 12000, 6),
('Виброплита', '2019', 10, 23000, 6),
('Насос скважинный', '2019', 7, 5880, 6),
('Бак для воды 3л.', '2019', 20, 23000, 4),
('Сажалка для луковичных', '2019', 7, 550, 4),
('Пила', '2020', 7, 3000, 5),
('Виброплита бензиновая', '2021', 10, 20000, 6),
('Болторез', '2021', 10, 3000, 6),
('Кёрхер', '2019', 10, 5000, 5),
('Бак 250л.', '2021', 15, 4000, 7),
('Бочка 750л.', '2018', 15, 7000, 4),
('Станок для заточки цепей', '2023', 10, 4300, 6),
('Удлинитель 20м.', '2017', 7, 700, 48),
('Удлинитель 30м.', '2017', 7, 1200, 6),
('Катушка без проводов', '2017', 7, 1000, 6),
('Удлинитель без катушки', '2017', 7, 800, 4),
('Удлинитель 20м.', '2021', 7, 1800, 140),
('Удлинитель 30м.', '2023', 7, 2000, 45),
('Канистра 10л.', '2016', 10, 1000, 20),
('Канистра 20л.', '2018', 10, 2000, 6),
('Канистра 5л.', '2019', 10, 1250, 60),
('Ножницы для живой изгороди', '2014', 10, 2000, 42),
('Кусторез', '2020', 5, 1200, 20),
('Кусторез', '2021', 5, 1000, 7),
('Ножницы многофункциональные', '2022', 7, 1800, 4),
('Кусторез ручной', '2023', 7, 1803, 25),
('Кусторез', '2023', 10, 2780, 30),
('Грабли', '2019', 5, 479, 20),
('Грабли ручные', '2021', 7, 780, 18),
('Грабли веерные ручные', '2023', 3, 918, 30),
('Совок для прополки', '2018', 7, 530, 78),
('Корнеудалитель', '2018', 7, 530, 6),
('Совок цветочный', '2019', 5, 659, 60),
('Cовок цветочный', '2018', 7, 300, 6),
('Мотыга', '2017', 10, 1650, 30),
('Рыхлилка', '2017', 10, 800, 8),
('Тяпка', '2017', 10, 1100, 5),
('Щётка для дорожек', '2017', 7, 1500, 12),
('Сеялка', '2017', 10, 2500, 6),
('Тяпка', '2018', 7, 600, 4),
('Прореживатель на колёсах GARDENA', '2015', 15, 3900, 6),
('Тяпка рыхлилка', '2019', 7, 1000, 5),
('Прореживатель', '2018', 10, 1700, 68),
('Лестница раскладная', '2010', 15, 9000, 12),
('Стремянка', '2019', 5, 2000, 10),
('Каток', '2016', 10, 4500, 24),
('Грабли', '2018', 7, 1070, 138),
('Грабли изогнутые', '2021', 7, 1268, 12),
('Грабли', '2022', 7, 2000, 24),
('Палка', '2019', 15, 0, 330),
('Кирка', '2015', 10, 1000, 16),
('Лом', '2015', 10, 1000, 5),
('Молот', '2023', 10, 650, 12),
('Гвоздодёр Matrix', '2023', 10, 900, 6),
('Кирка', '2023', 10, 1000, 10),
('Молот', '2023', 10, 600, 36),
('Гвоздодёр', '2023', 10, 798, 6),
('Лом', '2023', 10, 1253, 6),
('Дождеватель', '2018', 10, 2000, 6),
('Шланг', '2023', 7, 2500, 56),
('Дождеватель', '2022', 7, 2000, 4),
('Топор-колун', '2019', 7, 3000, 63),
('Топор', '2023', 7, 1348, 30),
('Кувалда', '2019', 7, 650, 36),
('Тяпка кованная', '2022', 7, 500, 20),
('Тяпка ручная', '2023', 7, 800, 56),
('Плоскорез', '2023', 7, 750, 6),
('Ножовка мини', '2021', 5, 500, 24),
('Ножовка складная', '2022', 5, 2500, 12),
('Ножовка', '2022', 5, 650, 16),
('Пила с изогнутым полотном', '2023', 5, 1700, 12),
('Пила с прямым полотном', '2023', 5, 3930, 5),
('Уровень строительный', '2017', 10, 1000, 6),
('Рулетка 5м.', '2019', 5, 200, 30),
('Рулетка 30м.', '2019', 5, 400, 15),
('Линейка вертикальная 2м.', '2020', 10, 3000, 10);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Функции
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_gen_phone()
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
BEGIN 
  RETURN CAST(FLOOR(RANDOM()*(999-100)+100) AS VARCHAR) || '-' || CAST(FLOOR(RANDOM() * (99-10) + 10) AS VARCHAR) || '-' || CAST(FLOOR(RANDOM() * (99-10) + 10) AS VARCHAR);
END;
$function$
;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Анонимные блоки для генерации данных в таблицах
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- EMPLOYEE(EMP_ID, EMP_NAME, EMP_PHONE, BIRTH, BEGIN_DATE, WORK_EXP)
DO
$$
DECLARE array_employee_names VARCHAR[] := ARRAY[
  'Игнатьева Л.С.', 
  'Кононов П.Г.',   
  'Ткачева А.В.',   
  'Гончарова В.В.', 
  'Булатова В.Л.',  
  'Евдокимов Р.С.', 
  'Голованов Н.М.', 
  'Ананьева Е.И.',  
  'Никитин М.П.',   
  'Петровский Г.Р.',
  'Суханова О.И.',  
  'Киселева К.А.',  
  'Журавлев Б.О.',  
  'Шаповалова Г.М.',
  'Богомолова И.М.',
  'Савельев А.Я.',
  'Дроздова Ю.Р.',
  'Игнатова А.В.',
  'Кольцова В.А.',
  'Рыжова Д.Г.',
  'Ткачев Е.М.',
  'Левина П.А.',
  'Ларионов Д.В.',
  'Кольцова Э.П.',
  'Терехова Д.В.',
  'Бочаров П.Т.',
  'Цветкова А.Е.',
  'Евсеев Л.В.',
  'Масленников А.С.',
  'Емельянов М.Э.',
  'Ларионова Л.П.',
  'Артемова В.Л.',
  'Дорофеева Ю.Ф.',
  'Плотников Р.К.',
  'Лебедева Е.В.',
  'Щербаков Ф.Б.'
];
DECLARE 
  len_employee INT := array_length(array_employee_names, 1);
  I INT;
  DATE_BD DATE;
  DATE_BEG_MIN DATE;
  DATE_BEG DATE;
  WORK_YEARS INT;
BEGIN 
  FOR I IN 1..len_employee 
  LOOP
    DATE_BD := ('1964-01-01 00:00:00'::timestamp + ('2004-12-31 23:59:59'::timestamp - '1964-01-01 00:00:00'::timestamp) * RANDOM())::date; -- 1963 - 60 лет, 2004 - 18 лет

    DATE_BEG_MIN := (DATE_BD + interval '18 YEAR')::DATE; 
    IF (DATE_BEG_MIN) < '2017-03-01'::DATE THEN -- если сотруднику исполнилось 18 до создания фирмы то минимальная дата приема на работу - дата создания фирмы '2017-03-01'
      DATE_BEG_MIN := '2017-03-01'::DATE; 
    END IF; 
    DATE_BEG := ((DATE_BEG_MIN || ' 00:00:00')::timestamp + ((current_date || ' 00:00:00')::timestamp - (DATE_BEG_MIN || ' 00:00:00')::timestamp) * RANDOM())::DATE; 

    WORK_YEARS := (FLOOR(RANDOM()*((extract(year from CURRENT_DATE) - (EXTRACT(YEAR FROM DATE_BD) + 18)) - 0) + 0))::INT; -- НАЧАЛО + (КОНЕЦ – НАЧАЛО) * RANDOM()

    IF (SIGN(RANDOM()-0.8) = -1) THEN 
      INSERT INTO employee(emp_name, emp_phone, birth, begin_date, work_exp) 
      VALUES 
        (array_employee_names[i], fn_gen_phone(), DATE_BD, DATE_BEG, WORK_YEARS); 
    ELSE
      INSERT INTO employee(emp_name, emp_phone, birth, begin_date, work_exp) 
      VALUES 
        (array_employee_names[i], NULL, DATE_BD, DATE_BEG, WORK_YEARS); 
    END IF;
  END LOOP; 
END;
$$;

-- CLIENT(CL_ID, CL_NAME, CL_PHONE)
DO
$$
DECLARE array_clients VARCHAR[]:= ARRAY [
  'Куприянова В.В.',
  'Кириллова У.В.',
  'Орехова М.Е.',
  'Бирюков Р.Ш.',
  'Воробьева Е.В.',
  'Головин И.И.',
  'Суханов К.М.',
  'Кулешов Е.Я.',
  'Панов В.А.',
  'Исаков А.А.',
  'Крючкова Д.И.',
  'Никулина Л.К.',
  'Герасимова П.Н.',
  'Афанасьева Н.А.',
  'Овчинников Г.Л.',
  'Бобров Р.К.',
  'Леонов Л.С.',
  'Соколов В.И.',
  'Орлова В.М.',
  'Крюков Э.Г.',
  'Клюев А.П.',
  'Устинова С.М.',
  'Сазонова А.В.',
  'Фирсова Р.В.',
  'Третьяков А.Т.',
  'Пантелеев Э.Г.',
  'Крючков В.С.',
  'Петухов Г.В.',
  'Гончаров В.М.',
  'Ткачева В.Л.',
  'Мельников А.И.',
  'Елисеев Л.Я.',
  'Жданова А.Г.',
  'Гуляева П.А.',
  'Назаров В.М.',
  'Голикова О.Р.',
  'Винокурова С.Е.',
  'Акимова М.А.',
  'Трифонов Г.Д.',
  'Севастьянова О.К.',
  'Авдеев Н.Л.',
  'Федорова Н.А.',
  'Ткачева Ю.Э.',
  'Соловьева С.Л.',
  'Тихомиров Д.Д.',
  'Золотова У.И.',
  'Кононова Л.А.',
  'Зимин А.Д.',
  'Курочкина В.В.',
  'Сафонова Л.И.',
  'Чистяков Р.И.',
  'Уткин Т.Ф.',
  'Тихомирова С.И.',
  'Полякова Л.Ц.',
  'Воронцов А.К.',
  'Ермаков Т.Е.',
  'Уткин Ц.С.',
  'Игнатьев В.Ю.',
  'Плотников С.Ш.',
  'Сидоров М.Д.',
  'Ершов И.С.',
  'Андреев М.П.',
  'Столяров Л.Р.',
  'Егоров М.М.',
  'Фокин Г.С.',
  'Горбачева А.Д.',
  'Блинов Т.Р.',
  'Жуков С.М.',
  'Богомолов Д.Ю.',
  'Жданова М.П.',
  'Зубова М.Э.',
  'Мальцева В.М.',
  'Комаров Т.М.',
  'Никольская О.А.',
  'Бородина Э.И.',
  'Серов Ш.Р.',
  'Кондратьев Э.О.',
  'Цветков Ф.М.',
  'Соловьев В.Е.',
  'Литвинова Е.О.',
  'Карасев С.А.',
  'Новиков Г.П.',
  'Молчанов Ш.М.',
  'Царев Г.Э.',
  'Федотова Г.Р.',
  'Терехов М.С.',
  'Лапшин Д.М.',
  'Калмыков В.Г.',
  'Ерофеев Э.К.',
  'Голованова Л.А.',
  'Богданова В.В.',
  'Родионова С.Д.',
  'Романова А.А.',
  'Прокофьева М.Д.',
  'Сазонов А.А.',
  'Кравцова Т.В.',
  'Филатова Г.М.',
  'Никулина М.Л.',
  'Нефедов М.Л.',
  'Гусев Н.Е.',
  'Михеева П.Ф.',
  'Шестакова Л.В.',
  'Артемова Н.В.',
  'Тихомиров Э.Б.',
  'Белоусов В.С.',
  'Герасимов М.Р.',
  'Колесников Ц.П.',
  'Дорофеева С.В.',
  'Буров Е.В.',
  'Латышев Р.Р.',
  'Юдин Б.А.',
  'Черкасова А.О.',
  'Грачев И.В.',
  'Комаров А.С.',
  'Кононова Э.Т.',
  'Мухина Л.М.',
  'Миронова О.Д.',
  'Лукин И.Р.',
  'Осипова В.И.',
  'Савельев Д.Т.',
  'Федоров Р.С.',
  'Левина Д.Р.',
  'Орлова Р.Ц.',
  'Пахомов Г.А.',
  'Фадеев С.М.',
  'Зотов Г.В.',
  'Лаптева В.Я.',
  'Зотова Н.Д.',
  'Пантелеева Э.А.',
  'Грачев С.С.',
  'Румянцева А.П.',
  'Грачев В.В.',
  'Никулина Р.А.',
  'Жуков В.Е.',
  'Максимов А.Н.',
  'Краснова Т.М.',
  'Горелова А.П.',
  'Синицына А.В.',
  'Симонов Д.В.',
  'Бочарова К.Л.',
  'Серебряков Р.А.',
  'Селиванов Я.Р.',
  'Моисеева Н.В.',
  'Аникин М.И.',
  'Сазонова Д.Д.',
  'Носова Н.М.',
  'Дегтярев Т.И.',
  'Устинова Д.В.',
  'Алексеева А.Н.',
  'Ильина Е.Ф.',
  'Орлова Ж.Ф.',
  'Кондрашов М.Е.',
  'Медведев М.А.',
  'Демидов Т.С.',
  'Митрофанов В.Ц.',
  'Крылова М.М.',
  'Терехова Л.Г.',
  'Богданова Т.Т.',
  'Меркулова О.М.',
  'Рогов В.А.',
  'Громова М.А.',
  'Шубина Л.Т.',
  'Киселева А.Г.',
  'Ушаков Я.В.',
  'Кочеткова А.В.',
  'Головин К.В.',
  'Булатова Н.Ф.',
  'Рогов Я.П.',
  'Коновалова К.К.',
  'Пантелеев Ш.В.',
  'Павлова Д.И.',
  'Старостин Т.Г.',
  'Плотникова З.П.',
  'Крючкова Д.Э.',
  'Мальцев В.А.',
  'Галкин А.М.',
  'Золотарев Р.Ц.',
  'Николаев Н.К.',
  'Никитин С.Н.',
  'Носов Н.М.',
  'Голубева М.С.',
  'Давыдова Э.Д.',
  'Коровин И.Р.',
  'Беляева П.Ш.',
  'Суворов М.Я.',
  'Емельянова Д.С.',
  'Шишкина А.П.',
  'Харитонов Д.К.',
  'Софронов Ю.О.',
  'Сальников Ш.П.',
  'Кудрявцева Р.Г.',
  'Михайлов Т.Л.',
  'Русаков Т.А.',
  'Горбачев К.О.',
  'Маркина З.С.',
  'Кочетков В.Г.',
  'Емельянова Н.В.',
  'Щукина Т.Я.',
  'Федосеева Е.В.',
  'Пантелеев К.А.'
];
len_clients INT := ARRAY_LENGTH(array_clients, 1);
I INT;
BEGIN 
  FOR I IN 1..len_clients 
  LOOP
    IF (SIGN(RANDOM()-0.8) = -1) THEN 
      INSERT INTO client(cl_name, cl_phone) 
      VALUES (array_clients[I], fn_gen_phone());
    ELSE
      INSERT INTO client(cl_name, cl_phone) 
      VALUES (array_clients[I], NULL);
    END IF;
  END LOOP; 
END;
$$;

-- FACILITY(FAC_ID, TOWN, PLACE, DISTANCE, CL_ID)
DO
$$
DECLARE array_adr VARCHAR[] := ARRAY [
  'ул. Центральная, 49', 
  'ул. Фрунзе, 46', 
  'ул. Рабочая, 38', 
  'ул. Чкалова, 49', 
  'ул. Верхняя, 48', 
  'ул. Чапаева, 28', 
  'ул. Центральная, 39', 
  'ул. Мичурина, 12', 
  'ул. Озерная, 31', 
  'ул. Клубная, 26', 
  'ул. Школьная, 3', 
  'ул. Юбилейная, 20', 
  'ул. Майская, 46', 
  'ул. Школьная, 37', 
  'ул. Дачная, 46', 
  'ул. Фрунзе, 6', 
  'ул. Пушкина, 2', 
  'ул. Верхняя, 47', 
  'ул. Западная, 1', 
  'ул. Интернациональная, 41', 
  'ул. Маяковского, 9', 
  'ул. Северная, 14', 
  'ул. Сосновая, 27', 
  'ул. Заречная, 24', 
  'ул. Горная, 11', 
  'ул. Свободы, 28', 
  'ул. Майская, 15', 
  'ул. Сосновая, 40', 
  'ул. Советская, 14', 
  'ул. Фрунзе, 35', 
  'ул. Трудовая, 43', 
  'ул. Чехова, 47', 
  'ул. Победы, 24', 
  'ул. Интернациональная, 45', 
  'ул. Заречная, 26', 
  'ул. Гоголя, 50', 
  'ул. Заводская, 33', 
  'ул. Комарова, 40', 
  'ул. Железнодорожная, 16', 
  'ул. Спортивная, 39', 
  'ул. Речная, 26', 
  'ул. Октябрьская, 48', 
  'ул. Гагарина, 40', 
  'ул. Солнечная, 8', 
  'ул. Речная, 42', 
  'ул. Молодежная, 18', 
  'ул. Спортивная, 23', 
  'ул. Комсомольская, 11', 
  'ул. Больничная, 48', 
  'ул. Коммунистическая, 48', 
  'ул. Речная, 35', 
  'ул. Речная, 18', 
  'ул. Юбилейная, 13', 
  'ул. Комсомольская, 15', 
  'ул. Партизанская, 18', 
  'ул. Мичурина, 40', 
  'ул. Заречная, 12', 
  'ул. Майская, 11', 
  'ул. Северная, 34', 
  'ул. Верхняя, 8', 
  'ул. Сосновая, 15', 
  'ул. Весенняя, 33', 
  'ул. Пушкина, 29', 
  'ул. Восточная, 36', 
  'ул. Чапаева, 1', 
  'ул. Подгорная, 47', 
  'ул. Дружбы, 27', 
  'ул. Кооперативная, 41', 
  'ул. Дзержинского, 29', 
  'ул. Юбилейная, 5', 
  'ул. Партизанская, 3', 
  'ул. Железнодорожная, 14', 
  'ул. Красная, 22', 
  'ул. Партизанская, 7', 
  'ул. Заводская, 15', 
  'ул. Родниковая, 20', 
  'ул. Куйбышева, 50', 
  'ул. Совхозная, 3', 
  'ул. Комсомольская, 36', 
  'ул. Парковая, 10', 
  'ул. Вишневая, 6', 
  'ул. Дорожная, 36', 
  'ул. Овражная, 21', 
  'ул. Дзержинского, 14', 
  'ул. Молодежная, 46', 
  'ул. Энергетиков, 7', 
  'ул. Молодежная, 49', 
  'ул. Озерная, 12', 
  'ул. Садовая, 31', 
  'ул. Заводская, 19', 
  'ул. Строителей, 39', 
  'ул. Шоссейная, 5', 
  'ул. Вокзальная, 20', 
  'ул. Кооперативная, 49', 
  'ул. Лесная, 29', 
  'ул. Колхозная, 9', 
  'ул. Овражная, 28', 
  'ул. Полевая, 4', 
  'ул. Береговая, 15', 
  'ул. 8 Марта, 50', 
  'ул. Озерная, 40', 
  'ул. Комарова, 47', 
  'ул. Шоссейная, 41', 
  'ул. Кирова, 20', 
  'ул. Пролетарская, 6', 
  'ул. Подгорная, 32', 
  'ул. Зеленая, 47', 
  'ул. Механизаторов, 27', 
  'ул. Совхозная, 49', 
  'ул. Садовая, 7', 
  'ул. Набережная, 42', 
  'ул. Озерная, 24', 
  'ул. Степная, 42', 
  'ул. Полевая, 5', 
  'ул. Свободы, 45', 
  'ул. Вокзальная, 16', 
  'ул. Береговая, 19', 
  'ул. Спортивная, 16', 
  'ул. Светлая, 20', 
  'ул. Школьная, 25', 
  'ул. Вишневая, 5', 
  'ул. 1 Мая, 26', 
  'ул. Дзержинского, 22', 
  'ул. Овражная, 18', 
  'ул. Школьная, 49', 
  'ул. Зеленая, 49', 
  'ул. Строителей, 5', 
  'ул. Нагорная, 3', 
  'ул. Восточная, 5', 
  'ул. Светлая, 2', 
  'ул. Дачная, 32', 
  'ул. Железнодорожная, 25', 
  'ул. Парковая, 27', 
  'ул. 8 Марта, 33', 
  'ул. Фрунзе, 45', 
  'ул. Заводская, 36', 
  'ул. Некрасова, 3', 
  'ул. Луговая, 32', 
  'ул. Степная, 9', 
  'ул. Набережная, 37', 
  'ул. Некрасова, 2', 
  'ул. Калинина, 33', 
  'ул. Береговая, 14', 
  'ул. Труда, 35', 
  'ул. Комсомольская, 12', 
  'ул. Молодежная, 45', 
  'ул. Заводская, 29', 
  'ул. Железнодорожная, 9', 
  'ул. 8 Марта, 26', 
  'ул. 8 Марта, 30', 
  'ул. Коммунистическая, 19', 
  'ул. Гагарина, 27', 
  'ул. Подгорная, 20', 
  'ул. Механизаторов, 26', 
  'ул. Советская, 31', 
  'ул. Клубная, 18', 
  'ул. Пролетарская, 22', 
  'ул. Вишневая, 12', 
  'ул. Куйбышева, 1', 
  'ул. Спортивная, 4', 
  'ул. Восточная, 18', 
  'ул. Чкалова, 16', 
  'ул. Цветочная, 34', 
  'ул. Маяковского, 12', 
  'ул. Красноармейская, 43', 
  'ул. Степная, 50', 
  'ул. Кирова, 11', 
  'ул. Южная, 27', 
  'ул. Трудовая, 28', 
  'ул. Комсомольская, 37', 
  'ул. Труда, 4', 
  'ул. Карла Маркса, 18', 
  'ул. Садовая, 13', 
  'ул. Береговая, 9', 
  'ул. Мира, 2', 
  'ул. Красная, 5', 
  'ул. Дружбы, 45', 
  'ул. Механизаторов, 22', 
  'ул. Интернациональная, 16', 
  'ул. Горная, 41', 
  'ул. Западная, 13', 
  'ул. Береговая, 48', 
  'ул. Лермонтова, 10', 
  'ул. Московская, 18', 
  'ул. Вокзальная, 47', 
  'ул. Заводская, 3', 
  'ул. Майская, 37', 
  'ул. Озерная, 2', 
  'ул. Комарова, 26', 
  'ул. Строителей, 40', 
  'ул. Чкалова, 28', 
  'ул. Березовая, 22', 
  'ул. Юбилейная, 38', 
  'ул. Энергетиков, 37', 
  'ул. Вокзальная, 33', 
  'ул. Московская, 13', 
  'ул. Строителей, 2', 
  'ул. Свердлова, 24', 
  'ул. Центральная, 41', 
  'ул. Клубная, 50', 
  'ул. Красноармейская, 18', 
  'ул. Советская, 45', 
  'ул. Зеленая, 45', 
  'ул. Нагорная, 40', 
  'ул. Зеленая, 37', 
  'ул. Калинина, 35', 
  'ул. Победы, 46', 
  'ул. Красноармейская, 2', 
  'ул. Восточная, 35', 
  'ул. Советская, 19', 
  'ул. Чехова, 8', 
  'ул. 1 Мая, 25', 
  'ул. Весенняя, 49', 
  'ул. Солнечная, 21', 
  'ул. Центральная, 1', 
  'ул. Интернациональная, 25', 
  'ул. Школьная, 16', 
  'ул. Свободы, 50', 
  'ул. Свободы, 46', 
  'ул. Труда, 17', 
  'ул. Куйбышева, 34', 
  'ул. Родниковая, 34', 
  'ул. Свободы, 18', 
  'ул. Ленина, 28', 
  'ул. Кирова, 5', 
  'ул. Верхняя, 42', 
  'ул. Чкалова, 31', 
  'ул. Некрасова, 6', 
  'ул. Колхозная, 17', 
  'ул. 1 Мая, 19', 
  'ул. Строительная, 41', 
  'ул. Некрасова, 26', 
  'ул. Зеленая, 2', 
  'ул. Механизаторов, 32', 
  'ул. Мира, 12', 
  'ул. Железнодорожная, 27', 
  'ул. Сосновая, 37', 
  'ул. Железнодорожная, 29', 
  'ул. Новая, 36', 
  'ул. Заречная, 6', 
  'ул. Колхозная, 21', 
  'ул. Чехова, 6', 
  'ул. Вишневая, 41', 
  'ул. Матросова, 26', 
  'ул. Вокзальная, 8', 
  'ул. Клубная, 17', 
  'ул. Овражная, 12', 
  'ул. Шоссейная, 35', 
  'ул. Комарова, 35', 
  'ул. Октябрьская, 26', 
  'ул. Шоссейная, 27', 
  'ул. Парковая, 25', 
  'ул. Энергетиков, 40', 
  'ул. Дорожная, 19', 
  'ул. Степная, 36', 
  'ул. Труда, 28', 
  'ул. Ленина, 34', 
  'ул. Вокзальная, 23', 
  'ул. Нагорная, 29', 
  'ул. Вокзальная, 13', 
  'ул. Березовая, 27', 
  'ул. Советская, 40', 
  'ул. Гагарина, 26', 
  'ул. Верхняя, 39', 
  'ул. Восточная, 1', 
  'ул. Победы, 42', 
  'ул. Фрунзе, 40', 
  'ул. Мичурина, 22', 
  'ул. Октябрьская, 29', 
  'ул. Почтовая, 50', 
  'ул. Строительная, 25', 
  'ул. Почтовая, 12', 
  'ул. Механизаторов, 28', 
  'ул. Лесная, 39', 
  'ул. Юбилейная, 41', 
  'ул. Береговая, 47', 
  'ул. Верхняя, 24', 
  'ул. Мичурина, 42', 
  'ул. Цветочная, 43', 
  'ул. Зеленая, 41', 
  'ул. Гоголя, 41', 
  'ул. Спортивная, 40', 
  'ул. Почтовая, 41', 
  'ул. Речная, 16', 
  'ул. Труда, 2', 
  'ул. Пролетарская, 42', 
  'ул. Интернациональная, 2', 
  'ул. Заречная, 48', 
  'ул. Маяковского, 16', 
  'ул. Дорожная, 11', 
  'ул. Сосновая, 11', 
  'ул. Почтовая, 24', 
  'ул. Первомайская, 7', 
  'ул. Пионерская, 25', 
  'ул. Набережная, 25', 
  'ул. Березовая, 37', 
  'ул. Вокзальная, 5', 
  'ул. Светлая, 49', 
  'ул. Механизаторов, 6', 
  'ул. Маяковского, 10', 
  'ул. Чкалова, 42', 
  'ул. Матросова, 49', 
  'ул. Озерная, 17', 
  'ул. Кирова, 8', 
  'ул. Набережная, 16', 
  'ул. Строителей, 16', 
  'ул. Верхняя, 5', 
  'ул. Энергетиков, 6', 
  'ул. Первомайская, 28', 
  'ул. Рабочая, 10', 
  'ул. Гоголя, 26', 
  'ул. Парковая, 37', 
  'ул. Гоголя, 21', 
  'ул. Маяковского, 22', 
  'ул. Цветочная, 7', 
  'ул. Горького, 27', 
  'ул. Южная, 24', 
  'ул. Заводская, 32', 
  'ул. Пионерская, 35', 
  'ул. Лесная, 35', 
  'ул. Шоссейная, 28', 
  'ул. Маяковского, 32', 
  'ул. Весенняя, 2', 
  'ул. Майская, 9', 
  'ул. Советская, 6', 
  'ул. Трактовая, 44', 
  'ул. Мира, 4', 
  'ул. Чкалова, 29', 
  'ул. Комарова, 15', 
  'ул. Речная, 17', 
  'ул. Некрасова, 42', 
  'ул. Полевая, 3', 
  'ул. Мира, 32', 
  'ул. Полевая, 49', 
  'ул. Горького, 12', 
  'ул. Дорожная, 13', 
  'ул. Мира, 39', 
  'ул. Горького, 6', 
  'ул. Карла Маркса, 42', 
  'ул. Верхняя, 45', 
  'ул. Дорожная, 48', 
  'ул. Мичурина, 16', 
  'ул. Речная, 10', 
  'ул. Юбилейная, 7', 
  'ул. Некрасова, 12', 
  'ул. Верхняя, 30', 
  'ул. Куйбышева, 21', 
  'ул. Вокзальная, 31', 
  'ул. Комарова, 30', 
  'ул. Мичурина, 39', 
  'ул. Дачная, 48', 
  'ул. Красноармейская, 42', 
  'ул. Комсомольская, 26', 
  'ул. Мичурина, 32', 
  'ул. Родниковая, 28', 
  'ул. Юбилейная, 4', 
  'ул. Трудовая, 36', 
  'ул. Березовая, 2', 
  'ул. Центральная, 13', 
  'ул. Северная, 1', 
  'ул. Родниковая, 4', 
  'ул. Трактовая, 14', 
  'ул. Спортивная, 48', 
  'ул. Красная, 25', 
  'ул. 1 Мая, 9', 
  'ул. Набережная, 18', 
  'ул. Красная, 30', 
  'ул. Строителей, 36', 
  'ул. Маяковского, 49', 
  'ул. Западная, 5', 
  'ул. Чапаева, 42', 
  'ул. Луговая, 33', 
  'ул. 1 Мая, 36', 
  'ул. Спортивная, 42', 
  'ул. Калинина, 34', 
  'ул. Совхозная, 18', 
  'ул. Горького, 48', 
  'ул. Чапаева, 39', 
  'ул. 8 Марта, 41', 
  'ул. Строительная, 44', 
  'ул. Дорожная, 15', 
  'ул. Пролетарская, 10', 
  'ул. Свердлова, 50', 
  'ул. Пушкина, 24', 
  'ул. Лесная, 22', 
  'ул. Трудовая, 45', 
  'ул. Чкалова, 22', 
  'ул. Весенняя, 42', 
  'ул. Спортивная, 27', 
  'ул. Колхозная, 45', 
  'ул. Строительная, 37', 
  'ул. Юбилейная, 49', 
  'ул. Маяковского, 29', 
  'ул. Подгорная, 17', 
  'ул. Некрасова, 24', 
  'ул. Верхняя, 22', 
  'ул. 8 Марта, 11', 
  'ул. Дзержинского, 26', 
  'ул. Горького, 30'
];
array_cities VARCHAR[] := ARRAY[
  'г. Ростов-на-Дону',
  'г. Батайск', 
  'г. Азов',
  'п. Щепкино', 
  'г. Шахты',
  'г. Аксай',
  'п. Янтарный',
  'ст-ца. Кущевская',
  'г. Таганрог',
  'г. Новошахтинск',
  'г. Новочеркасск',
  'п. Октябрьский'
];
array_km INT[] := ARRAY[0, 12, 39, 23, 79, 16, 16, 80, 75, 61, 42, 26]; -- КМ МЕЖДУ ЦЕНТРАМИ ГОРОДОВ
len_km INT := ARRAY_LENGTH(array_km, 1);
len_cities INT := ARRAY_LENGTH(array_cities, 1);
len_adr INT := ARRAY_LENGTH(array_adr, 1);
I INT;
client_id INT;
rand_ind INT;
BEGIN 
  FOR I IN 1..len_adr 
  LOOP
    begin
    client_id := (select cl.cl_id 
                  from client cl
                  where cl.cl_id not in (select fac.cl_id
                                          from facility fac
                                          group by fac.cl_id
                                          having count(*) > 3)
                  ORDER BY RANDOM() LIMIT 1); -- выбор id клиента, у которого не больше 3 объектов
    IF (SIGN(RANDOM()-0.3) = -1) THEN 
      INSERT INTO facility (town, place, distance, cl_id)
      VALUES (array_cities[1], array_adr[i], array_km[1], client_id);
    ELSE
      rand_ind := FLOOR(RANDOM()*(len_cities+1-2)+2);
      INSERT INTO facility (town, place, distance, cl_id)
      VALUES (array_cities[rand_ind], array_adr[i], array_km[rand_ind], client_id);
    END IF;
    end;
    commit;
  END LOOP; 
END;
$$;

-- DEPARTURE(DEP_ID, FAC_ID, DEP_DATE, TIME_COME, TIME_INCOME, DEP_TIME, EMP_CNT, DEP_SUM)
-- Временная таблица для добавления выездов по возрастанию времени приезда на объект
CREATE GLOBAL TEMPORARY TABLE TMP_DEPARTURE
  (
    DEP_ID SERIAL,
    FAC_ID INTEGER,
    DEP_DATE DATE,
    TIME_COME TIME,
    TIME_INCOME TIME,
    DEP_TIME TIME,
    EMP_CNT INTEGER, 
    DEP_SUM NUMERIC
  ) ON COMMIT PRESERVE ROWS;

-- Заполняются все поля, кроме EMP_CNT (заполняется триггером при добавлении строк в таблицу EMPLOYEE_ON_DEPARTURE), а в DEP_SUM считается только расстояние до объекта (остальное также в триггере)
-- Неравномерное распределение количества объектов в день
do
$$
DECLARE 
  id_f INT;
  DATE_DP date := '2014-03-01';
  col_dep_day INT;
  i int;
  J INT = 0;
  come timestamp;
  come_time time;
  income_time time;
  distance_dep INTEGER;
  time_dep    time;
  col_emp   INTEGER;
  sum_dep    numeric = 0;
  rand_val   float;
BEGIN 
  while DATE_DP < '2023-11-30'::date
  LOOP
    -- максимум 8 объектов в день
    rand_val := RANDOM();
    if rand_val < 0.7 then
      if rand_val < 0.2 then
        if rand_val < 0.06 then
          col_dep_day := 1;
        else
          col_dep_day := 2;
        end if;
      else
        if rand_val < 0.4 then
          col_dep_day := 3;
        elsif rand_val < 0.5 then
          col_dep_day := 6;
        else
          col_dep_day := 4;
        end if;
      end if;
    else
      if rand_val < 0.85 then
        col_dep_day := 5;
      elsif rand_val < 0.9 then
        col_dep_day := 7;
      else
        col_dep_day := 8;    
      end if;
    end if;

    sum_dep = 0;
    if ((extract(month from date_dp) not in (12, 1, 2)) and (extract(dow from date_dp) not in (6, 0))) then -- не рабочие дни: зима и суббота, воскресенье
      for i in 1..col_dep_day
      loop 
        begin
          come := ('2001-01-01 8:00:00'::timestamp + random() * ('2001-01-01 18:40:00'::timestamp - '2001-01-01 8:00:00'::timestamp))::timestamp;
          come_time := date_trunc('minute', come)::time;
          income_time := date_trunc('minute', (come + random() * ('2001-01-01 19:00:00'::timestamp - come)))::time  + interval '20 minutes'; -- min работа на объекте 20 мин

          id_f := (select fac.fac_id 
                  from facility fac
                  where fac.fac_id not in (select dep.fac_id 
                                          from TMP_DEPARTURE dep
                                          where dep.dep_date = DATE_DP
                                          group by dep.fac_id
                                          having count(*) > 1)
                  ORDER BY RANDOM() LIMIT 1); -- выбор id объекта, на котором в данный день еще не были (то есть на объект выезжают 1 раз за день)

          time_dep := income_time - come_time;

          distance_dep := (SELECT DISTANCE
                          FROM FACILITY
                          WHERE FAC_ID = id_f);

          sum_dep := sum_dep + (SELECT SERV_COST FROM SERVICE WHERE SERV_TYPE = 'транспортные расходы за пределы города (расстояние между центрами городов)') * distance_dep;    
          
          INSERT INTO TMP_DEPARTURE(FAC_ID, DEP_DATE, TIME_COME, TIME_INCOME, DEP_TIME, EMP_CNT, DEP_SUM) 
          VALUES 
            (id_f, DATE_DP, come_time, income_time, time_dep, 0, round(sum_dep, 2));
        end;
        commit;
      end loop;
    end if;
    DATE_DP := DATE_DP + 1;
    END LOOP; 
END;
$$;

DO
$$
DECLARE 
  REC RECORD;
BEGIN
  FOR REC IN (
    SELECT * 
      FROM TMP_DEPARTURE
     ORDER BY DEP_DATE, TIME_COME
  ) LOOP
      INSERT INTO departure(FAC_ID, DEP_DATE, TIME_COME, TIME_INCOME, DEP_TIME, EMP_CNT, DEP_SUM) 
      VALUES (
          REC.FAC_ID, 
          REC.DEP_DATE, 
          REC.TIME_COME, 
          REC.TIME_INCOME,
          REC.DEP_TIME, 
          REC.EMP_CNT, 
          REC.DEP_SUM
      );
      COMMIT;
  END LOOP;
END;
$$;

-- EMPLOYEE_ON_DEPARTURE(EMP_DEP_ID, DEP_ID, EMP_ID)
-- Триггер после вставки в EMPLOYEE_ON_DEPARTURE обновление EMP_CNT и DEP_SUM в DEPARTURE
CREATE OR REPLACE FUNCTION FN_TG_EMP_CNT_ON_DEPARTURE()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE 
  time_dep    time;
  col_emp   INTEGER;
  sum_dep    NUMERIC;
  minutes_time NUMERIC;
  hour_time NUMERIC;
BEGIN
  -- обновление количества сотрудников
  UPDATE DEPARTURE
    SET EMP_CNT = EMP_CNT + 1
    WHERE DEP_ID = NEW.DEP_ID;
 
  col_emp := (SELECT emp_cnt 
            FROM DEPARTURE
            WHERE DEP_ID = NEW.DEP_ID);
  
  sum_dep := (SELECT DEP_SUM
              FROM DEPARTURE
              WHERE DEP_ID = NEW.DEP_ID);
  
  time_dep := (SELECT DEP_TIME
              FROM DEPARTURE
              WHERE DEP_ID = NEW.DEP_ID);

  hour_time := extract(hour from time_dep)::int;
  minutes_time := extract(minutes from time_dep)::int;

  -- сумма с учетом количества сотрудников и времени на объекте
  if col_emp = 1 then 
    sum_dep := sum_dep + (select SERV_COST from SERVICE where SERV_TYPE = 'выезд 1 -го специалиста для проведения работ до 1 часа');
    if time_dep > '01:00:00' then
      sum_dep := sum_dep + (select SERV_COST from SERVICE where SERV_TYPE = 'каждый последующий час работы каждого специалиста') * ((hour_time - 1) + minutes_time/60);
    END IF;
  elsif col_emp = 2 then
    sum_dep := sum_dep - (select SERV_COST from SERVICE where SERV_TYPE = 'выезд 1 -го специалиста для проведения работ до 1 часа') + 
              (select SERV_COST from SERVICE where SERV_TYPE = 'выезд 2 -х специалистов для проведения работ до 1 часа');
    if time_dep > '01:00:00' then
      sum_dep := sum_dep + (select SERV_COST from SERVICE where SERV_TYPE = 'каждый последующий час работы каждого специалиста') * ((hour_time - 1) + minutes_time/60);
    END IF;
  else 
    sum_dep := sum_dep + (select SERV_COST from SERVICE where SERV_TYPE = 'выезд дополнительного специалиста в составе бригады до 1 часа');
    if time_dep > '01:00:00' then
      sum_dep := sum_dep + (select SERV_COST from SERVICE where SERV_TYPE = 'каждый последующий час работы каждого специалиста') * ((hour_time - 1) + minutes_time/60);
    END IF;
  END IF;

  -- обновление суммы работ
  UPDATE DEPARTURE
    SET DEP_SUM = round(sum_dep, 2)
    WHERE DEP_ID = NEW.DEP_ID;
  RETURN NULL;
END;
$function$
;

CREATE TRIGGER TG_EMP_CNT_ON_DEPARTURE
AFTER INSERT
ON PUBLIC.EMPLOYEE_ON_DEPARTURE
FOR EACH ROW
  EXECUTE FUNCTION FN_TG_EMP_CNT_ON_DEPARTURE();

-- Заполнение EMPLOYEE_ON_DEPARTURE
DO
$$
DECLARE 
  id_dep int DEFAULT 0;
  array_count_date INT[];
  date_dep date;
  come_time time;
  income_time time;
  time_dep time;
  col_emp_in_dep int;
  i int;
  j int;
  k INT;
  id_e VARCHAR[];
  rnd_val float;
BEGIN
array_count_date := ARRAY(SELECT  COUNT(*) FROM DEPARTURE group by dep_date);
date_dep := (select dep_date from departure where dep_id = 1);

FOR I IN 1..(SELECT  COUNT(distinct dep_date) FROM DEPARTURE)
LOOP  
  for j in 1..array_count_date[i] 
  loop
  begin
    id_dep := id_dep + 1;

    come_time := (select time_come from DEPARTURE where dep_id = id_dep);
    income_time := (select time_income from DEPARTURE where dep_id = id_dep);
    time_dep := income_time - come_time;

    -- 4 сотрудника максимум на объекте
    rnd_val := RANDOM();
    if rnd_val < 0.3 then
      col_emp_in_dep := ROUND((RANDOM()*(2-1)+1)::INTEGER);
    elsif rnd_val < 0.75 then
      col_emp_in_dep := 3;
    else 
      col_emp_in_dep := 4;
    end if;

    id_e := ARRAY(select emp.emp_id 
                  from employee emp
                  where emp.emp_id not in (select distinct ed.emp_id
                                          from EMPLOYEE_ON_DEPARTURE ed join departure d on ed.dep_id = d.dep_id
                                          where d.dep_date = date_dep)
                  order by random() limit col_emp_in_dep);
    for k in 1..col_emp_in_dep loop 
      INSERT INTO EMPLOYEE_ON_DEPARTURE(DEP_ID, EMP_ID)
      VALUES (id_dep, id_e[k]::integer);
    END LOOP;
  end;
  commit;
  END LOOP;
  date_dep := (select dep_date from departure where dep_id = id_dep + 1);
end loop;
END;
$$;

-- EQUIPMENT_ON_DEPARTURE(DEQ_ID SERIAL, DEP_ID, EMP_ID, EQ_ID, EQ_COUNT, RETURN_EQ)
DO
$$
DECLARE
  I          INTEGER := 1;
  j          INTEGER := 1;
  k          INTEGER;
  count_eq   INTEGER;
  col_emp    INTEGER;
  col_emp_with_eq INTEGER;
  array_id_emp integer[];
  array_id_eq   integer[];
  array_count_eq integer[];
  col_eq INTEGER;
  id_eq INTEGER;
BEGIN
  WHILE I <= (SELECT COUNT(*) FROM DEPARTURE) LOOP -- идем по дням
	begin
    col_emp := (SELECT EMP_CNT
                FROM DEPARTURE
                WHERE DEP_ID = I); -- количество садовников на рассматривамом выезде
    col_emp_with_eq := ROUND((RANDOM()*(col_emp-0)+0)::integer); -- количество садовников, которое будет с оборудованием
    
    if col_emp_with_eq > 0 then
    	array_id_emp := array(SELECT emp_id 
                          FROM EMPLOYEE_ON_DEPARTURE
                          WHERE DEP_ID = i 
                          order by random() 
                          limit col_emp_with_eq); -- id садовников с оборудованием
	   
   		j=1;
	    while j <= col_emp_with_eq loop -- идем по садовникам
	      col_eq := ROUND((RANDOM()*(4-1)+1)::integer); -- количество оборудования у одного садовника (максимум 4 оборудования может взять садовник)
	   
	      for k in 1..col_eq loop
			  begin
          IF (SIGN(RANDOM() - 0.6) = -1) THEN 
            count_eq := 1; -- количество одного и того же оборудования
          ELSE 
            count_eq := ROUND((RANDOM()*(3-2)+2)::integer);
          end if;
	        id_eq := (SELECT eq_id 
                      FROM EQUIPMENT 
                      WHERE eq_count >= count_eq
                      ORDER BY RANDOM()
                      LIMIT 1); 

          if id_eq is not null then
            insert into equipment_on_departure(dep_id, emp_id, eq_id, eq_count, return_eq)
	          values (i, array_id_emp[j], id_eq, count_eq, 'R'); -- T - взял , R - вернул

            IF (SIGN(RANDOM()-0.01) = -1) THEN -- в некоторых случаях оборудование не возвращается на склад
              update EQUIPMENT 
              set eq_count = eq_count - count_eq where eq_id = id_eq;
      
              update equipment_on_departure
              set return_eq = 'T' where dep_id = i and eq_id = id_eq;
            end if;
          end if;
	      end;
	      commit;
	    end loop;
      	j := j + 1;
    	end loop;
    end if;
    i := i + 1;
   end;
   commit;
  END LOOP;
END;
$$;

-- Добавление столбца main_emp в таблицу departure
ALTER TABLE departure 
  ADD COLUMN main_emp INTEGER;

DO
$$
DECLARE 
  i int;
  id_e int;
BEGIN
FOR I IN (SELECT dep_id FROM DEPARTURE)
LOOP
  -- если на объект отправилось больше одного садовника
    if (select emp_cnt from departure where dep_id = i) > 1 then
      if (RANDOM() <= 0.9) then 
        id_e := (select eod.emp_id 
	             from employee_on_departure eod 
	             where eod.dep_id = i
	             limit 1);
      	update departure 
      	set main_emp = id_e where dep_id = i;
      end if; 
    end if;
end loop;
END;
$$;

-- Добавление столбца role_on_dep в таблицу employee_on_departure
ALTER TABLE employee_on_departure 
  ADD COLUMN role_on_dep VARCHAR(30);

DO
$$
DECLARE 
  i int;
  me int;
BEGIN
FOR I IN (SELECT distinct dep_id FROM employee_on_departure)
LOOP
  		me := (select main_emp from departure where dep_id = i);
  		if (me is not null) then
	      	update employee_on_departure 
			set	 role_on_dep = 'Главный садовник' where emp_id = me and dep_id = i;
			update employee_on_departure 
			set	 role_on_dep = 'Cадовник' where emp_id != me and dep_id = i;
		else 
			update employee_on_departure 
			set	 role_on_dep = 'Cадовник' where dep_id = i;
      end if; 
end loop;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Дополнительные триггеры
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FACILITY: DISTANCE
CREATE OR REPLACE FUNCTION FN_TG_DISTANCE_ON_FACILITY()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE 
  CITY VARCHAR;
  KM INTEGER;
BEGIN 
  CITY := (SELECT TOWN
          FROM FACILITY
          WHERE FAC_ID = NEW.FAC_ID);

  KM := CASE 
          WHEN CITY = 'г. Ростов-на-Дону' THEN 0
          WHEN CITY = 'г. Батайск' THEN 12
          WHEN CITY = 'г. Азов' THEN 39
          WHEN CITY = 'п. Щепкино' THEN 23
          WHEN CITY = 'г. Шахты' THEN 79
          WHEN CITY = 'г. Аксай' THEN 16
          WHEN CITY = 'п. Янтарный' THEN 16
          WHEN CITY = 'ст-ца. Кущевская' THEN 80
          WHEN CITY = 'г. Таганрог' THEN 75
          WHEN CITY = 'г. Новошахтинск' THEN 61
          WHEN CITY = 'г. Новочеркасск' THEN 42
          WHEN CITY = 'п. Октябрьский' THEN 26   
        END; 
  
  UPDATE FACILITY
    SET DISTANCE = KM
    WHERE FAC_ID = NEW.FAC_ID;
  RETURN NULL;
END;
$function$
;

CREATE TRIGGER TG_DISTANCE_ON_FACILITY
AFTER INSERT
ON PUBLIC.FACILITY
FOR EACH ROW
  EXECUTE FUNCTION FN_TG_DISTANCE_ON_FACILITY();

--DEPARTURE: DEP_TIME, SUM_DEP
CREATE OR REPLACE FUNCTION FN_TG_TIME_SUM_ON_DEPARTURE()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE 
  TIME_ON_DEP TIME;
  SUM_DEP NUMERIC;
  distance_dep integer;
BEGIN 
  TIME_ON_DEP := (SELECT (TIME_INCOME - TIME_COME)
          FROM DEPARTURE
          WHERE DEP_ID = NEW.DEP_ID);
  
  UPDATE DEPARTURE
    SET DEP_TIME = TIME_ON_DEP
    WHERE DEP_ID = NEW.DEP_ID;

  distance_dep := (SELECT DISTANCE
                  FROM FACILITY
                  WHERE FAC_ID = NEW.FAC_ID);
  
  if  distance_dep != 0 then
    sum_dep := (SELECT SERV_COST FROM SERVICE WHERE SERV_TYPE = 'транспортные расходы за пределы города (расстояние между центрами городов)') * distance_dep;    
  END IF;
  
  UPDATE DEPARTURE
    SET DEP_SUM = sum_dep
    WHERE DEP_ID = NEW.DEP_ID;

  RETURN NULL;
END;
$function$
;

CREATE TRIGGER TG_TIME_SUM_ON_DEPARTUR
AFTER INSERT
ON PUBLIC.DEPARTURE
FOR EACH ROW
  EXECUTE FUNCTION FN_TG_TIME_SUM_ON_DEPARTURE();

--EQUIPMENT_ON_DEPARTURE -> EQUIPMENT: RETURN_EQ
CREATE OR REPLACE FUNCTION FN_TG_CNT_ON_EQUIPMENT()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN           
  IF (NEW.RETURN_EQ = 'T') THEN
    UPDATE EQUIPMENT
      SET EQ_COUNT = EQ_COUNT - NEW.EQ_COUNT
      WHERE DEQ_ID = NEW.DEQ_ID;
  ELSIF (NEW.RETURN_EQ = 'R') THEN
    UPDATE EQUIPMENT
      SET EQ_COUNT = EQ_COUNT + NEW.EQ_COUNT
      WHERE DEQ_ID = NEW.DEQ_ID;
  END IF;
  RETURN NULL;
END;
$function$
;

CREATE TRIGGER TG_CNT_ON_EQUIPMENT
AFTER INSERT
ON PUBLIC.EQUIPMENT_ON_DEPARTURE
FOR EACH ROW
  EXECUTE FUNCTION FN_TG_CNT_ON_EQUIPMENT();
